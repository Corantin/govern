{
  "address": "0xc73BCDc0FF18Fb903FCd34de4BFfE37BE66b4E8f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aclRoot",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "executionDelay",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC3000Data.Collateral",
              "name": "scheduleDeposit",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC3000Data.Collateral",
              "name": "challengeDeposit",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "resolver",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "rules",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "maxCalldataSize",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC3000Data.Config",
          "name": "_initialConfig",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "containerHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "actor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "reason",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "resolverId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ERC3000Data.Collateral",
          "name": "collateral",
          "type": "tuple"
        }
      ],
      "name": "Challenged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "configHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "actor",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "executionDelay",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC3000Data.Collateral",
              "name": "scheduleDeposit",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC3000Data.Collateral",
              "name": "challengeDeposit",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "resolver",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "rules",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "maxCalldataSize",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ERC3000Data.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "Configured",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "containerHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "Frozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "actor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IACLOracle",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "Granted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ReceivedCallback",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "magicNumber",
          "type": "bytes4"
        }
      ],
      "name": "RegisteredCallback",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "RegisteredStandard",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "containerHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "actor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "Resolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "actor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "Revoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrator",
          "name": "arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ruling",
          "type": "uint256"
        }
      ],
      "name": "Ruled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "containerHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "executionTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "submitter",
              "type": "address"
            },
            {
              "internalType": "contract IERC3000Executor",
              "name": "executor",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ERC3000Data.Action[]",
              "name": "actions",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes32",
              "name": "allowFailuresMap",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "challenger",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct ERC3000Data.Payload",
          "name": "payload",
          "type": "tuple"
        }
      ],
      "name": "Scheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "containerHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "actor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "reason",
          "type": "bytes"
        }
      ],
      "name": "Vetoed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ROOT_ROLE",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ACLData.BulkOp",
              "name": "op",
              "type": "uint8"
            },
            {
              "internalType": "bytes4",
              "name": "role",
              "type": "bytes4"
            },
            {
              "internalType": "address",
              "name": "who",
              "type": "address"
            }
          ],
          "internalType": "struct ACLData.BulkItem[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "bulk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionTime",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "submitter",
                  "type": "address"
                },
                {
                  "internalType": "contract IERC3000Executor",
                  "name": "executor",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct ERC3000Data.Action[]",
                  "name": "actions",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes32",
                  "name": "allowFailuresMap",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "proof",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "challenger",
                  "type": "address"
                }
              ],
              "internalType": "struct ERC3000Data.Payload",
              "name": "payload",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "executionDelay",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ERC3000Data.Collateral",
                  "name": "scheduleDeposit",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ERC3000Data.Collateral",
                  "name": "challengeDeposit",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "rules",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "maxCalldataSize",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC3000Data.Config",
              "name": "config",
              "type": "tuple"
            }
          ],
          "internalType": "struct ERC3000Data.Container",
          "name": "_container",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_reason",
          "type": "bytes"
        }
      ],
      "name": "challenge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "challengerCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "configHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "executionDelay",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC3000Data.Collateral",
              "name": "scheduleDeposit",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC3000Data.Collateral",
              "name": "challengeDeposit",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "resolver",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "rules",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "maxCalldataSize",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC3000Data.Config",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "name": "configure",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "contract IArbitrator",
          "name": "",
          "type": "address"
        }
      ],
      "name": "disputeItemCache",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionTime",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "submitter",
                  "type": "address"
                },
                {
                  "internalType": "contract IERC3000Executor",
                  "name": "executor",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct ERC3000Data.Action[]",
                  "name": "actions",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes32",
                  "name": "allowFailuresMap",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "proof",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "challenger",
                  "type": "address"
                }
              ],
              "internalType": "struct ERC3000Data.Payload",
              "name": "payload",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "executionDelay",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ERC3000Data.Collateral",
                  "name": "scheduleDeposit",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ERC3000Data.Collateral",
                  "name": "challengeDeposit",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "rules",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "maxCalldataSize",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC3000Data.Config",
              "name": "config",
              "type": "tuple"
            }
          ],
          "internalType": "struct ERC3000Data.Container",
          "name": "_container",
          "type": "tuple"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "failureMap",
          "type": "bytes32"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_role",
          "type": "bytes4"
        }
      ],
      "name": "freeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_role",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        }
      ],
      "name": "grant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_role",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        },
        {
          "internalType": "contract IACLOracle",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "grantWithOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "initBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aclRoot",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "executionDelay",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC3000Data.Collateral",
              "name": "scheduleDeposit",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC3000Data.Collateral",
              "name": "challengeDeposit",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "resolver",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "rules",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "maxCalldataSize",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC3000Data.Config",
          "name": "_initialConfig",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_role",
          "type": "bytes4"
        }
      ],
      "name": "isFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "queue",
      "outputs": [
        {
          "internalType": "enum GovernQueueStateLib.State",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionTime",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "submitter",
                  "type": "address"
                },
                {
                  "internalType": "contract IERC3000Executor",
                  "name": "executor",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct ERC3000Data.Action[]",
                  "name": "actions",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes32",
                  "name": "allowFailuresMap",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "proof",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "challenger",
                  "type": "address"
                }
              ],
              "internalType": "struct ERC3000Data.Payload",
              "name": "payload",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "executionDelay",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ERC3000Data.Collateral",
                  "name": "scheduleDeposit",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ERC3000Data.Collateral",
                  "name": "challengeDeposit",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "rules",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "maxCalldataSize",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC3000Data.Config",
              "name": "config",
              "type": "tuple"
            }
          ],
          "internalType": "struct ERC3000Data.Container",
          "name": "_container",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "failureMap",
          "type": "bytes32"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_role",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "roles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionTime",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "submitter",
                  "type": "address"
                },
                {
                  "internalType": "contract IERC3000Executor",
                  "name": "executor",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct ERC3000Data.Action[]",
                  "name": "actions",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes32",
                  "name": "allowFailuresMap",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "proof",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "challenger",
                  "type": "address"
                }
              ],
              "internalType": "struct ERC3000Data.Payload",
              "name": "payload",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "executionDelay",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ERC3000Data.Collateral",
                  "name": "scheduleDeposit",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ERC3000Data.Collateral",
                  "name": "challengeDeposit",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "rules",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "maxCalldataSize",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC3000Data.Config",
              "name": "config",
              "type": "tuple"
            }
          ],
          "internalType": "struct ERC3000Data.Container",
          "name": "_container",
          "type": "tuple"
        }
      ],
      "name": "schedule",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "containerHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionTime",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "submitter",
                  "type": "address"
                },
                {
                  "internalType": "contract IERC3000Executor",
                  "name": "executor",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct ERC3000Data.Action[]",
                  "name": "actions",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes32",
                  "name": "allowFailuresMap",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "proof",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "challenger",
                  "type": "address"
                }
              ],
              "internalType": "struct ERC3000Data.Payload",
              "name": "payload",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "executionDelay",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ERC3000Data.Collateral",
                  "name": "scheduleDeposit",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ERC3000Data.Collateral",
                  "name": "challengeDeposit",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "rules",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "maxCalldataSize",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC3000Data.Config",
              "name": "config",
              "type": "tuple"
            }
          ],
          "internalType": "struct ERC3000Data.Container",
          "name": "_container",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_reason",
          "type": "bytes"
        }
      ],
      "name": "veto",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x183a63fa745cbf3213eeb2d4a67520713b191bd6dac99aa975b6081a9570fa4d",
  "receipt": {
    "to": null,
    "from": "0x91B0d67D3F47A30FBEeB159E67209Ad6cb2cE22E",
    "contractAddress": "0xc73BCDc0FF18Fb903FCd34de4BFfE37BE66b4E8f",
    "transactionIndex": 33,
    "gasUsed": "3232292",
    "logsBloom": "0x
    "blockHash": "0xfe0f2ba8c09613ab35a73257e8370fd127c8965ea09f1d4f569856882fb44798",
    "transactionHash": "0x183a63fa745cbf3213eeb2d4a67520713b191bd6dac99aa975b6081a9570fa4d",
    "logs": [
      {
        "transactionIndex": 33,
        "blockNumber": 7986054,
        "transactionHash": "0x183a63fa745cbf3213eeb2d4a67520713b191bd6dac99aa975b6081a9570fa4d",
        "address": "0xc73BCDc0FF18Fb903FCd34de4BFfE37BE66b4E8f",
        "topics": [
          "0xc62063b81f7036fd97a0dc546516e99f11004d2d76ca0fddd3866346c86e7091",
          "0x586df60400000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000091b0d67d3f47a30fbeeb159e67209ad6cb2ce22e",
          "0x0000000000000000000000007375ed576952bd6ced060eee2db763130ea13ba0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002",
        "logIndex": 73,
        "blockHash": "0xfe0f2ba8c09613ab35a73257e8370fd127c8965ea09f1d4f569856882fb44798"
      },
      {
        "transactionIndex": 33,
        "blockNumber": 7986054,
        "transactionHash": "0x183a63fa745cbf3213eeb2d4a67520713b191bd6dac99aa975b6081a9570fa4d",
        "address": "0xc73BCDc0FF18Fb903FCd34de4BFfE37BE66b4E8f",
        "topics": [
          "0x7bc2a48a4a566e237a12186f19d985b0f76afc9d5290601edac19876253670c2",
          "0xd99e39303be7c43f3cd7f2d4f6aa487d2867be2d071eed6a8d4a888742b0fa85"
        ],
        "data": "0x",
        "logIndex": 74,
        "blockHash": "0xfe0f2ba8c09613ab35a73257e8370fd127c8965ea09f1d4f569856882fb44798"
      },
      {
        "transactionIndex": 33,
        "blockNumber": 7986054,
        "transactionHash": "0x183a63fa745cbf3213eeb2d4a67520713b191bd6dac99aa975b6081a9570fa4d",
        "address": "0xc73BCDc0FF18Fb903FCd34de4BFfE37BE66b4E8f",
        "topics": [
          "0x844435c59f7ccdf12de134e8f9b3b7d664fe9f06e3263680779599ba4097bc3f",
          "0x737056bcbba82e68d00f54d0de43833491724a1248a2889931ea580a9c7b0dd9",
          "0x00000000000000000000000091b0d67d3f47a30fbeeb159e67209ad6cb2ce22e"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000012c000000000000000000000000dc31ee1784292379fbb2964b3b9c4124d8f89c60000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000dc31ee1784292379fbb2964b3b9c4124d8f89c60000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000006b81e57848a75369cc5f13ed98c62412a40f19e7000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 75,
        "blockHash": "0xfe0f2ba8c09613ab35a73257e8370fd127c8965ea09f1d4f569856882fb44798"
      },
      {
        "transactionIndex": 33,
        "blockNumber": 7986054,
        "transactionHash": "0x183a63fa745cbf3213eeb2d4a67520713b191bd6dac99aa975b6081a9570fa4d",
        "address": "0xc73BCDc0FF18Fb903FCd34de4BFfE37BE66b4E8f",
        "topics": [
          "0xbf5e1f87f5ab65b58074cd29244d7c487a948983cda4b932e0f966b62bd34aca"
        ],
        "data": "0xc2ff2bf000000000000000000000000000000000000000000000000000000000",
        "logIndex": 76,
        "blockHash": "0xfe0f2ba8c09613ab35a73257e8370fd127c8965ea09f1d4f569856882fb44798"
      },
      {
        "transactionIndex": 33,
        "blockNumber": 7986054,
        "transactionHash": "0x183a63fa745cbf3213eeb2d4a67520713b191bd6dac99aa975b6081a9570fa4d",
        "address": "0xc73BCDc0FF18Fb903FCd34de4BFfE37BE66b4E8f",
        "topics": [
          "0x7bc2a48a4a566e237a12186f19d985b0f76afc9d5290601edac19876253670c2",
          "0xbac5ecd2faa027574e2101f9b6bdc19dec3f76beff12aa506ac3391be0022e46"
        ],
        "data": "0x",
        "logIndex": 77,
        "blockHash": "0xfe0f2ba8c09613ab35a73257e8370fd127c8965ea09f1d4f569856882fb44798"
      }
    ],
    "blockNumber": 7986054,
    "cumulativeGasUsed": "6990325",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7375Ed576952BD6CeD060EeE2Db763130eA13bA0",
    [
      300,
      [
        "0xdc31Ee1784292379Fbb2964b3B9C4124D8F89C60",
        "10000000000000000"
      ],
      [
        "0xdc31Ee1784292379Fbb2964b3B9C4124D8F89C60",
        "10000000000000000"
      ],
      "0x6b81e57848A75369cC5F13ED98c62412a40F19E7",
      "0x0000000000000000000000000000000000000000",
      100000
    ]
  ],
  "solcInputHash": "9a7bf2723644b3942064104e31811cbe",
  "metadata": "{\"compiler\":{\"version\":\"0.6.8+commit.0bbfe453\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aclRoot\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"executionDelay\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"scheduleDeposit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"challengeDeposit\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rules\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maxCalldataSize\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Config\",\"name\":\"_initialConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"containerHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resolverId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"collateral\",\"type\":\"tuple\"}],\"name\":\"Challenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"configHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"executionDelay\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"scheduleDeposit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"challengeDeposit\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rules\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maxCalldataSize\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ERC3000Data.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"Configured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"containerHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"Frozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IACLOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"Granted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ReceivedCallback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"magicNumber\",\"type\":\"bytes4\"}],\"name\":\"RegisteredCallback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"RegisteredStandard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"containerHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Resolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrator\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ruling\",\"type\":\"uint256\"}],\"name\":\"Ruled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"containerHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"contract IERC3000Executor\",\"name\":\"executor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ERC3000Data.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"allowFailuresMap\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ERC3000Data.Payload\",\"name\":\"payload\",\"type\":\"tuple\"}],\"name\":\"Scheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"containerHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"Vetoed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROOT_ROLE\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ACLData.BulkOp\",\"name\":\"op\",\"type\":\"uint8\"},{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"internalType\":\"struct ACLData.BulkItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"bulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"contract IERC3000Executor\",\"name\":\"executor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ERC3000Data.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"allowFailuresMap\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct ERC3000Data.Payload\",\"name\":\"payload\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"executionDelay\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"scheduleDeposit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"challengeDeposit\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rules\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maxCalldataSize\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"internalType\":\"struct ERC3000Data.Container\",\"name\":\"_container\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"challenge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"challengerCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"executionDelay\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"scheduleDeposit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"challengeDeposit\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rules\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maxCalldataSize\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Config\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"configure\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"contract IArbitrator\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disputeItemCache\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"contract IERC3000Executor\",\"name\":\"executor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ERC3000Data.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"allowFailuresMap\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct ERC3000Data.Payload\",\"name\":\"payload\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"executionDelay\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"scheduleDeposit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"challengeDeposit\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rules\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maxCalldataSize\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"internalType\":\"struct ERC3000Data.Container\",\"name\":\"_container\",\"type\":\"tuple\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"failureMap\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_role\",\"type\":\"bytes4\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_role\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"grant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_role\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"contract IACLOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"grantWithOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"initBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aclRoot\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"executionDelay\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"scheduleDeposit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"challengeDeposit\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rules\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maxCalldataSize\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Config\",\"name\":\"_initialConfig\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_role\",\"type\":\"bytes4\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"enum GovernQueueStateLib.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"contract IERC3000Executor\",\"name\":\"executor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ERC3000Data.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"allowFailuresMap\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct ERC3000Data.Payload\",\"name\":\"payload\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"executionDelay\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"scheduleDeposit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"challengeDeposit\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rules\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maxCalldataSize\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"internalType\":\"struct ERC3000Data.Container\",\"name\":\"_container\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"failureMap\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_role\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"contract IERC3000Executor\",\"name\":\"executor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ERC3000Data.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"allowFailuresMap\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct ERC3000Data.Payload\",\"name\":\"payload\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"executionDelay\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"scheduleDeposit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"challengeDeposit\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rules\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maxCalldataSize\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"internalType\":\"struct ERC3000Data.Container\",\"name\":\"_container\",\"type\":\"tuple\"}],\"name\":\"schedule\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"containerHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"contract IERC3000Executor\",\"name\":\"executor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ERC3000Data.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"allowFailuresMap\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"internalType\":\"struct ERC3000Data.Payload\",\"name\":\"payload\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"executionDelay\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"scheduleDeposit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Collateral\",\"name\":\"challengeDeposit\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"rules\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maxCalldataSize\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC3000Data.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"internalType\":\"struct ERC3000Data.Container\",\"name\":\"_container\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"veto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"challenge(((uint256,uint256,address,address,(address,uint256,bytes)[],bytes32,bytes,address),(uint256,(address,uint256),(address,uint256),address,bytes,uint256)),bytes)\":{\"params\":{\"_container\":\"A ERC3000Data.Container struct holding both the payload being scheduled for execution and the current configuration of the system\",\"_reason\":\"Hint for case reviewers as to why the scheduled container is illegal\"}},\"configure((uint256,(address,uint256),(address,uint256),address,bytes,uint256))\":{\"params\":{\"_config\":\"A ERC3000Data.Config struct holding all the new params that will control the queue\"}},\"constructor\":{\"params\":{\"_aclRoot\":\"account that will be given root permissions on ACL (commonly given to factory)\",\"_initialConfig\":\"initial configuration parameters\"}},\"execute(((uint256,uint256,address,address,(address,uint256,bytes)[],bytes32,bytes,address),(uint256,(address,uint256),(address,uint256),address,bytes,uint256)))\":{\"params\":{\"_container\":\"A ERC3000Data.Container struct holding both the payload being scheduled for execution and the current configuration of the system\"}},\"resolve(((uint256,uint256,address,address,(address,uint256,bytes)[],bytes32,bytes,address),(uint256,(address,uint256),(address,uint256),address,bytes,uint256)),uint256)\":{\"params\":{\"_container\":\"A ERC3000Data.Container struct holding both the payload being scheduled for execution and the current configuration of the system\",\"_disputeId\":\"disputeId in the arbitrator in which the dispute over the container was created\"}},\"schedule(((uint256,uint256,address,address,(address,uint256,bytes)[],bytes32,bytes,address),(uint256,(address,uint256),(address,uint256),address,bytes,uint256)))\":{\"params\":{\"_container\":\"A ERC3000Data.Container struct holding both the payload being scheduled for execution and the current configuration of the system\"}}}},\"userdoc\":{\"methods\":{\"challenge(((uint256,uint256,address,address,(address,uint256,bytes)[],bytes32,bytes,address),(uint256,(address,uint256),(address,uint256),address,bytes,uint256)),bytes)\":{\"notice\":\"Challenge a container in case its scheduling is illegal as per Config.rules. Pulls collateral and dispute fees from sender into contract\"},\"configure((uint256,(address,uint256),(address,uint256),address,bytes,uint256))\":{\"notice\":\"Apply a new configuration for all *new* containers to be scheduled\"},\"execute(((uint256,uint256,address,address,(address,uint256,bytes)[],bytes32,bytes,address),(uint256,(address,uint256),(address,uint256),address,bytes,uint256)))\":{\"notice\":\"Executes an action after its execution delay has passed and its state hasn't been altered by a challenge or veto\"},\"resolve(((uint256,uint256,address,address,(address,uint256,bytes)[],bytes32,bytes,address),(uint256,(address,uint256),(address,uint256),address,bytes,uint256)),uint256)\":{\"notice\":\"Apply arbitrator's ruling over a challenge once it has come to a final ruling\"},\"schedule(((uint256,uint256,address,address,(address,uint256,bytes)[],bytes32,bytes,address),(uint256,(address,uint256),(address,uint256),address,bytes,uint256)))\":{\"notice\":\"Schedules an action for execution, allowing for challenges and vetos on a defined time window. Pulls collateral from submitter into contract.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/pipelines/GovernQueue.sol\":\"GovernQueue\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@aragon/govern-contract-utils/contracts/acl/ACL.sol\":{\"content\":\"/*\\r\\n * SPDX-License-Identifier:    MIT\\r\\n */\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../initializable/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"./IACLOracle.sol\\\";\\r\\n\\r\\nlibrary ACLData {\\r\\n    enum BulkOp { Grant, Revoke, Freeze }\\r\\n\\r\\n    struct BulkItem {\\r\\n        BulkOp op;\\r\\n        bytes4 role;\\r\\n        address who;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ACL is Initializable {\\r\\n    bytes4 public constant ROOT_ROLE =\\r\\n        this.grant.selector\\r\\n        ^ this.revoke.selector\\r\\n        ^ this.freeze.selector\\r\\n        ^ this.bulk.selector\\r\\n    ;\\r\\n\\r\\n    // \\\"Who\\\" constants\\r\\n    address internal constant ANY_ADDR = address(-1);\\r\\n\\r\\n    // \\\"Access\\\" flags\\r\\n    address internal constant UNSET_ROLE = address(0);\\r\\n    address internal constant FREEZE_FLAG = address(1); // Also used as \\\"who\\\"\\r\\n    address internal constant ALLOW_FLAG = address(2);\\r\\n\\r\\n    // Role -> Who -> Access flag (unset or allow) or ACLOracle (any other address denominates auth via ACLOracle)\\r\\n    mapping (bytes4 => mapping (address => address)) public roles;\\r\\n\\r\\n    event Granted(bytes4 indexed role, address indexed actor, address indexed who, IACLOracle oracle);\\r\\n    event Revoked(bytes4 indexed role, address indexed actor, address indexed who);\\r\\n    event Frozen(bytes4 indexed role, address indexed actor);\\r\\n\\r\\n    modifier auth(bytes4 _role) {\\r\\n        require(willPerform(_role, msg.sender, msg.data), \\\"acl: auth\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier initACL(address _initialRoot) {\\r\\n        // ACL might have been already initialized by constructors\\r\\n        if (initBlocks[\\\"acl\\\"] == 0) {\\r\\n            _initializeACL(_initialRoot);\\r\\n        } else {\\r\\n            require(roles[ROOT_ROLE][_initialRoot] == ALLOW_FLAG, \\\"acl: initial root misaligned\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _initialRoot) public initACL(_initialRoot) { }\\r\\n\\r\\n    function grant(bytes4 _role, address _who) external auth(ROOT_ROLE) {\\r\\n        _grant(_role, _who);\\r\\n    }\\r\\n\\r\\n    function grantWithOracle(bytes4 _role, address _who, IACLOracle _oracle) external auth(ROOT_ROLE) {\\r\\n        _grantWithOracle(_role, _who, _oracle);\\r\\n    }\\r\\n\\r\\n    function revoke(bytes4 _role, address _who) external auth(ROOT_ROLE) {\\r\\n        _revoke(_role, _who);\\r\\n    }\\r\\n\\r\\n    function freeze(bytes4 _role) external auth(ROOT_ROLE) {\\r\\n        _freeze(_role);\\r\\n    }\\r\\n\\r\\n    function bulk(ACLData.BulkItem[] calldata items) external auth(ROOT_ROLE) {\\r\\n        for (uint256 i = 0; i < items.length; i++) {\\r\\n            ACLData.BulkItem memory item = items[i];\\r\\n\\r\\n            if (item.op == ACLData.BulkOp.Grant) _grant(item.role, item.who);\\r\\n            else if (item.op == ACLData.BulkOp.Revoke) _revoke(item.role, item.who);\\r\\n            else if (item.op == ACLData.BulkOp.Freeze) _freeze(item.role);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function willPerform(bytes4 _role, address _who, bytes memory _data) internal returns (bool) {\\r\\n        // First check if the given who is auth'd, then if any address is auth'd\\r\\n        return _checkRole(_role, _who, _data) || _checkRole(_role, ANY_ADDR, _data);\\r\\n    }\\r\\n\\r\\n    function isFrozen(bytes4 _role) public view returns (bool) {\\r\\n        return roles[_role][FREEZE_FLAG] == FREEZE_FLAG;\\r\\n    }\\r\\n\\r\\n    function _initializeACL(address _initialRoot) internal onlyInit(\\\"acl\\\") {\\r\\n        _grant(ROOT_ROLE, _initialRoot);\\r\\n    }\\r\\n\\r\\n    function _grant(bytes4 _role, address _who) internal {\\r\\n        _grantWithOracle(_role, _who, IACLOracle(ALLOW_FLAG));\\r\\n    }\\r\\n\\r\\n    function _grantWithOracle(bytes4 _role, address _who, IACLOracle _oracle) internal {\\r\\n        require(!isFrozen(_role), \\\"acl: frozen\\\");\\r\\n        require(_who != FREEZE_FLAG, \\\"acl: bad freeze\\\");\\r\\n\\r\\n        roles[_role][_who] = address(_oracle);\\r\\n        emit Granted(_role, msg.sender, _who, _oracle);\\r\\n    }\\r\\n\\r\\n    function _revoke(bytes4 _role, address _who) internal {\\r\\n        require(!isFrozen(_role), \\\"acl: frozen\\\");\\r\\n\\r\\n        roles[_role][_who] = UNSET_ROLE;\\r\\n        emit Revoked(_role, msg.sender, _who);\\r\\n    }\\r\\n\\r\\n    function _freeze(bytes4 _role) internal {\\r\\n        require(!isFrozen(_role), \\\"acl: frozen\\\");\\r\\n\\r\\n        roles[_role][FREEZE_FLAG] = FREEZE_FLAG;\\r\\n        emit Frozen(_role, msg.sender);\\r\\n    }\\r\\n\\r\\n    function _checkRole(bytes4 _role, address _who, bytes memory _data) internal returns (bool) {\\r\\n        address accessFlagOrAclOracle = roles[_role][_who];\\r\\n        if (accessFlagOrAclOracle != UNSET_ROLE) {\\r\\n            if (accessFlagOrAclOracle == ALLOW_FLAG) return true;\\r\\n\\r\\n            // Since it's not a flag, assume it's an ACLOracle and try-catch to skip failures\\r\\n            try IACLOracle(accessFlagOrAclOracle).willPerform(_role, _who, _data) returns (bool allowed) {\\r\\n                if (allowed) return true;\\r\\n            } catch { }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4b746aefebf6dc252c2e2034f7e50b2786814d0b1b7c256de8ec31cd7c0f1b72\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/acl/IACLOracle.sol\":{\"content\":\"/*\\r\\n * SPDX-License-Identifier:    MIT\\r\\n */\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\ninterface IACLOracle {\\r\\n    function willPerform(bytes4 role, address who, bytes calldata data) external returns (bool allowed);\\r\\n}\\r\\n\",\"keccak256\":\"0x5b7f5fed284ec040975d321b7e2a1c620a4abfdd54bb88b7e23217466e6160a9\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/adaptive-erc165/AdaptiveERC165.sol\":{\"content\":\"/*\\r\\n * SPDX-License-Identifier:    MIT\\r\\n */\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\nimport \\\"../erc165/ERC165.sol\\\";\\r\\n\\r\\ncontract AdaptiveERC165 is ERC165 {\\r\\n    // ERC165 interface ID -> whether it is supported\\r\\n    mapping (bytes4 => bool) internal standardSupported;\\r\\n    // Callback function signature -> magic number to return\\r\\n    mapping (bytes4 => bytes32) internal callbackMagicNumbers;\\r\\n\\r\\n    bytes32 internal constant UNREGISTERED_CALLBACK = bytes32(0);\\r\\n\\r\\n    event RegisteredStandard(bytes4 interfaceId);\\r\\n    event RegisteredCallback(bytes4 sig, bytes4 magicNumber);\\r\\n    event ReceivedCallback(bytes4 indexed sig, bytes data);\\r\\n\\r\\n    function supportsInterface(bytes4 _interfaceId) override virtual public view returns (bool) {\\r\\n        return standardSupported[_interfaceId] || super.supportsInterface(_interfaceId);\\r\\n    }\\r\\n\\r\\n    function _handleCallback(bytes4 _sig, bytes memory _data) internal {\\r\\n        bytes32 magicNumber = callbackMagicNumbers[_sig];\\r\\n        require(magicNumber != UNREGISTERED_CALLBACK, \\\"adap-erc165: unknown callback\\\");\\r\\n\\r\\n        emit ReceivedCallback(_sig, _data);\\r\\n\\r\\n        // low-level return magic number\\r\\n        assembly {\\r\\n            mstore(0x00, magicNumber)\\r\\n            return(0x00, 0x20)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _registerStandardAndCallback(bytes4 _interfaceId, bytes4 _callbackSig, bytes4 _magicNumber) internal {\\r\\n        _registerStandard(_interfaceId);\\r\\n        _registerCallback(_callbackSig, _magicNumber);\\r\\n    }\\r\\n\\r\\n    function _registerStandard(bytes4 _interfaceId) internal {\\r\\n        standardSupported[_interfaceId] = true;\\r\\n        emit RegisteredStandard(_interfaceId);\\r\\n    }\\r\\n\\r\\n    function _registerCallback(bytes4 _callbackSig, bytes4 _magicNumber) internal {\\r\\n        callbackMagicNumbers[_callbackSig] = _magicNumber;\\r\\n        emit RegisteredCallback(_callbackSig, _magicNumber);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x56ecb92ff9cab1e4c72cbb3d55bfe8c553d651848d4d09f1e6d3c1ce22bbe1c8\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/address-utils/AddressUtils.sol\":{\"content\":\"/*\\r\\n * SPDX-License-Identifier:    MIT\\r\\n */\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\nlibrary AddressUtils {\\r\\n    \\r\\n    function toPayable(address addr) internal pure returns (address payable) {\\r\\n        return address(bytes20(addr));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     */\\r\\n    function isContract(address addr) internal view returns (bool result) {\\r\\n        assembly {\\r\\n            result := iszero(iszero(extcodesize(addr)))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x25c56a7f0c69e257bca0e5d06ddf1a818f79bd1370d8699397934ad0a84ce967\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/deposits/DepositLib.sol\":{\"content\":\"/*\\r\\n * SPDX-License-Identifier:    MIT\\r\\n */\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\nimport \\\"erc3k/contracts/ERC3000Data.sol\\\";\\r\\n\\r\\nimport \\\"../erc20/ERC20.sol\\\";\\r\\nimport \\\"../erc20/SafeERC20.sol\\\";\\r\\n\\r\\nlibrary DepositLib {\\r\\n    using SafeERC20 for ERC20;\\r\\n\\r\\n    event Locked(address indexed token, address indexed from, uint256 amount);\\r\\n    event Unlocked(address indexed token, address indexed to, uint256 amount);\\r\\n\\r\\n    function collectFrom(ERC3000Data.Collateral memory _collateral, address _from) internal {\\r\\n        if (_collateral.amount > 0) {\\r\\n            ERC20 token = ERC20(_collateral.token);\\r\\n            require(token.safeTransferFrom(_from, address(this), _collateral.amount), \\\"deposit: bad token lock\\\");\\r\\n\\r\\n            emit Locked(_collateral.token, _from, _collateral.amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function releaseTo(ERC3000Data.Collateral memory _collateral, address _to) internal {\\r\\n        if (_collateral.amount > 0) {\\r\\n            ERC20 token = ERC20(_collateral.token);\\r\\n            require(token.safeTransfer(_to, _collateral.amount), \\\"deposit: bad token release\\\");\\r\\n\\r\\n            emit Unlocked(_collateral.token, _to, _collateral.amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7febef996d7bf32ddc29b00edeeb9a09e81899be1699ea901f6e812ecb5914b1\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/erc165/ERC165.sol\":{\"content\":\"/*\\r\\n * SPDX-License-Identifier:    MIT\\r\\n */\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\nabstract contract ERC165 {\\r\\n    // Includes supportsInterface method:\\r\\n    bytes4 internal constant ERC165_INTERFACE_ID = bytes4(0x01ffc9a7);\\r\\n\\r\\n    /**\\r\\n    * @dev Query if a contract implements a certain interface\\r\\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\\r\\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\\r\\n    */\\r\\n    function supportsInterface(bytes4 _interfaceId) virtual public view returns (bool) {\\r\\n        return _interfaceId == ERC165_INTERFACE_ID;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x74cd0ab82ececb712d9aba3719ce639fdec78c7f47dfc89e11b44d150e647624\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/erc20/ERC20.sol\":{\"content\":\"/*\\r\\n * SPDX-License-Identifier:    MIT\\r\\n */\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\r\\n */\\r\\ninterface ERC20 {\\r\\n    // Optional fields \\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address _who) external view returns (uint256);\\r\\n\\r\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\r\\n\\r\\n    function transfer(address _to, uint256 _value) external returns (bool);\\r\\n\\r\\n    function approve(address _spender, uint256 _value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\r\\n\\r\\n    event Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x53eea4087f951b7df7d046ac5c72c282452126367f5f31a95db5572be46a93d2\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/erc20/SafeERC20.sol\":{\"content\":\"/*\\r\\n * SPDX-License-Identifier:    MIT\\r\\n */\\r\\n\\r\\n// From https://github.com/aragon/aragonOS/blob/next/contracts/common/SafeERC20.sol\\r\\n\\r\\n// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\\r\\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\nimport \\\"../address-utils/AddressUtils.sol\\\";\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using AddressUtils for address;\\r\\n\\r\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\r\\n        private\\r\\n        returns (bool ret)\\r\\n    {\\r\\n        if (!_addr.isContract()) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)    // free memory pointer\\r\\n\\r\\n            let success := call(\\r\\n                gas(),                // forward all\\r\\n                _addr,                // address\\r\\n                0,                    // no value\\r\\n                add(_calldata, 0x20), // calldata start\\r\\n                mload(_calldata),     // calldata length\\r\\n                ptr,                  // write output over free memory\\r\\n                0x20                  // uint256 return\\r\\n            )\\r\\n\\r\\n            if gt(success, 0) {\\r\\n                // Check number of bytes returned from last function call\\r\\n                switch returndatasize()\\r\\n\\r\\n                // No bytes returned: assume success\\r\\n                case 0 {\\r\\n                    ret := 1\\r\\n                }\\r\\n\\r\\n                // 32 bytes returned: check if non-zero\\r\\n                case 0x20 {\\r\\n                    // Only return success if returned data was true\\r\\n                    // Already have output in ptr\\r\\n                    ret := iszero(iszero(mload(ptr)))\\r\\n                }\\r\\n\\r\\n                // Not sure what was returned: don't mark as success\\r\\n                default { }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\r\\n    *      Note that this makes an external call to the token.\\r\\n    */\\r\\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\\r\\n        bytes memory transferCallData = abi.encodeWithSelector(\\r\\n            _token.transfer.selector,\\r\\n            _to,\\r\\n            _amount\\r\\n        );\\r\\n        return invokeAndCheckSuccess(address(_token), transferCallData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\r\\n    *      Note that this makes an external call to the token.\\r\\n    */\\r\\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\\r\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\r\\n            _token.transferFrom.selector,\\r\\n            _from,\\r\\n            _to,\\r\\n            _amount\\r\\n        );\\r\\n        return invokeAndCheckSuccess(address(_token), transferFromCallData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\r\\n    *      Note that this makes an external call to the token.\\r\\n    */\\r\\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\\r\\n        bytes memory approveCallData = abi.encodeWithSelector(\\r\\n            _token.approve.selector,\\r\\n            _spender,\\r\\n            _amount\\r\\n        );\\r\\n        return invokeAndCheckSuccess(address(_token), approveCallData);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2430c0406ce8295916e0e94cbe34f7890db58588621ec9f7c7bc123cb91c75d5\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/initializable/Initializable.sol\":{\"content\":\"/*\\r\\n * SPDX-License-Identifier:    MIT\\r\\n */\\r\\n\\r\\npragma solidity 0.6.8;\\r\\n\\r\\ncontract Initializable {\\r\\n    mapping (string => uint256) public initBlocks;\\r\\n\\r\\n    event Initialized(string indexed key);\\r\\n\\r\\n    modifier onlyInit(string memory key) {\\r\\n        require(initBlocks[key] == 0, \\\"initializable: already initialized\\\");\\r\\n        initBlocks[key] = block.number;\\r\\n        _;\\r\\n        emit Initialized(key);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x50f52ebb70ecf8cffcf83b01e20fc14744600ec0b17698267fdaf5ceb6565bbf\",\"license\":\"MIT\"},\"@aragon/govern-contract-utils/contracts/safe-math/SafeMath.sol\":{\"content\":\"/*\\r\\n * SPDX-License-Identifier:    GPL-3.0\\r\\n */\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\n// A library for performing overflow-safe math, courtesy of DappHub: https://github.com/dapphub/ds-math/blob/d0ef6d6a5f/src/math.sol\\r\\n// Modified to include only the essentials\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x + y) >= x, \\\"math: overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x - y) <= x, \\\"math: underflow\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x27fad962c9484b7b0ce1866107fc18ba1518761fc9b2cb73fa8ded91ab8e12c9\",\"license\":\"GPL-3.0\"},\"contracts/pipelines/GovernQueue.sol\":{\"content\":\"/*\\r\\n * SPDX-License-Identifier:    GPL-3.0\\r\\n */\\r\\n\\r\\npragma solidity 0.6.8;\\r\\npragma experimental ABIEncoderV2; // required for passing structs in calldata (fairly secure at this point)\\r\\n\\r\\nimport 'erc3k/contracts/IERC3000.sol';\\r\\n\\r\\nimport '@aragon/govern-contract-utils/contracts/acl/ACL.sol';\\r\\nimport '@aragon/govern-contract-utils/contracts/adaptive-erc165/AdaptiveERC165.sol';\\r\\nimport '@aragon/govern-contract-utils/contracts/deposits/DepositLib.sol';\\r\\nimport '@aragon/govern-contract-utils/contracts/erc20/SafeERC20.sol';\\r\\nimport '@aragon/govern-contract-utils/contracts/safe-math/SafeMath.sol';\\r\\n\\r\\nimport '../protocol/IArbitrable.sol';\\r\\nimport '../protocol/IArbitrator.sol';\\r\\nimport '../protocol/IExecutable.sol';\\r\\n\\r\\nlibrary GovernQueueStateLib {\\r\\n    enum State {\\r\\n        None,\\r\\n        Scheduled,\\r\\n        Challenged,\\r\\n        Approved,\\r\\n        Rejected,\\r\\n        Cancelled,\\r\\n        Executed\\r\\n    }\\r\\n\\r\\n    struct Item {\\r\\n        State state;\\r\\n    }\\r\\n\\r\\n    function checkState(Item storage _item, State _requiredState)\\r\\n        internal\\r\\n        view\\r\\n    {\\r\\n        require(_item.state == _requiredState, 'queue: bad state');\\r\\n    }\\r\\n\\r\\n    function setState(Item storage _item, State _state) internal {\\r\\n        _item.state = _state;\\r\\n    }\\r\\n\\r\\n    function checkAndSetState(\\r\\n        Item storage _item,\\r\\n        State _fromState,\\r\\n        State _toState\\r\\n    ) internal {\\r\\n        checkState(_item, _fromState);\\r\\n        setState(_item, _toState);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract GovernQueue is IERC3000, IArbitrable, AdaptiveERC165, ACL {\\r\\n    // Syntax sugar to enable method-calling syntax on types\\r\\n    using ERC3000Data for *;\\r\\n    using DepositLib for ERC3000Data.Collateral;\\r\\n    using GovernQueueStateLib for GovernQueueStateLib.Item;\\r\\n    using SafeERC20 for ERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // Map '4' as the 'allow' ruling; this implicitly maps '3' as the 'reject' ruling\\r\\n    uint256 internal constant ALLOW_RULING = 4;\\r\\n\\r\\n    // Permanent state\\r\\n    bytes32 public configHash; // keccak256 hash of the current ERC3000Data.Config\\r\\n    uint256 public nonce; // number of scheduled payloads so far\\r\\n    mapping(bytes32 => GovernQueueStateLib.Item) public queue; // container hash -> execution state\\r\\n\\r\\n    // Temporary state\\r\\n    mapping(bytes32 => address) public challengerCache; // container hash -> challenger addr (used after challenging and before dispute resolution)\\r\\n    mapping(bytes32 => mapping(IArbitrator => uint256)) public disputeItemCache; // container hash -> arbitrator addr -> dispute id (used between dispute creation and ruling)\\r\\n\\r\\n    /**\\r\\n     * @param _aclRoot account that will be given root permissions on ACL (commonly given to factory)\\r\\n     * @param _initialConfig initial configuration parameters\\r\\n     */\\r\\n    constructor(address _aclRoot, ERC3000Data.Config memory _initialConfig)\\r\\n        public\\r\\n        ACL(_aclRoot) // note that this contract directly derives from ACL (ACL is local to contract and not global to system in Govern)\\r\\n    {\\r\\n        initialize(_aclRoot, _initialConfig);\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _aclRoot,\\r\\n        ERC3000Data.Config memory _initialConfig\\r\\n    ) public initACL(_aclRoot) onlyInit('queue') {\\r\\n        _setConfig(_initialConfig);\\r\\n        _registerStandard(type(IERC3000).interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Schedules an action for execution, allowing for challenges and vetos on a defined time window. Pulls collateral from submitter into contract.\\r\\n     * @param _container A ERC3000Data.Container struct holding both the payload being scheduled for execution and\\r\\n     * the current configuration of the system\\r\\n     */\\r\\n    function schedule(\\r\\n        ERC3000Data.Container memory _container // TO FIX: Container is in memory and function has to be public to avoid an unestrutable solidity crash\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n        auth(this.schedule.selector) // note that all functions in this contract are ACL protected (commonly some of them will be open for any addr to perform)\\r\\n        returns (bytes32 containerHash)\\r\\n    {\\r\\n        // prevent griefing by front-running (the same container is sent by two different people and one must be challenged)\\r\\n        // and ensure container hashes are unique\\r\\n        require(_container.payload.nonce == ++nonce, 'queue: bad nonce');\\r\\n        // hash using ERC3000Data.hash(ERC3000Data.Config)\\r\\n        bytes32 _configHash = _container.config.hash();\\r\\n        // ensure that the hash of the config passed in the container matches the current config (implicit agreement approval by scheduler)\\r\\n        require(_configHash == configHash, 'queue: bad config');\\r\\n        // ensure that the time delta to the execution timestamp provided in the payload is at least after the config's execution delay\\r\\n        require(\\r\\n            _container.payload.executionTime >=\\r\\n                _container.config.executionDelay.add(block.timestamp),\\r\\n            'queue: bad delay'\\r\\n        );\\r\\n        // ensure that the submitter of the payload is also the sender of this call\\r\\n        require(\\r\\n            _container.payload.submitter == msg.sender,\\r\\n            'queue: bad submitter'\\r\\n        );\\r\\n        // Restrict the size of calldata to _container.config.maxCalldataSize to make sure challenge function stays callable\\r\\n        uint256 calldataSize;\\r\\n        assembly {\\r\\n            calldataSize := calldatasize()\\r\\n        }\\r\\n        require(\\r\\n            calldataSize <= _container.config.maxCalldataSize,\\r\\n            'calldatasize: limit exceeded'\\r\\n        );\\r\\n\\r\\n        for (\\r\\n            uint256 index = 0;\\r\\n            index < _container.payload.actions.length;\\r\\n            index++\\r\\n        ) {\\r\\n            IExecutable executable = IExecutable(\\r\\n                _container.payload.actions[index].to\\r\\n            ); // Contract that can execute the action\\r\\n            require(\\r\\n                executable.canExecute(msg.sender),\\r\\n                'Action cant be executed'\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // store and set container's hash\\r\\n        containerHash = ERC3000Data.containerHash(\\r\\n            _container.payload.hash(),\\r\\n            _configHash\\r\\n        );\\r\\n        queue[containerHash].checkAndSetState(\\r\\n            GovernQueueStateLib.State.None, // ensure that the state for this container is None\\r\\n            GovernQueueStateLib.State.Scheduled // and if so perform a state transition to Scheduled\\r\\n        );\\r\\n        // we don't need to save any more state about the container in storage\\r\\n        // we just authenticate the hash and assign it a state, since all future\\r\\n        // actions regarding the container will need to provide it as a witness\\r\\n        // all witnesses are logged from this contract at least once, so the\\r\\n        // trust assumption should be the same as storing all on-chain (move complexity to clients)\\r\\n\\r\\n        ERC3000Data.Collateral memory collateral = _container\\r\\n            .config\\r\\n            .scheduleDeposit;\\r\\n        collateral.collectFrom(_container.payload.submitter); // pull collateral from submitter (requires previous approval)\\r\\n\\r\\n        // the configured resolver may specify additional out-of-band payments for scheduling actions\\r\\n        // schedule() leaves these requirements up to the callers of `schedule()` or other users to fulfill\\r\\n\\r\\n        // emit an event to ensure data availability of all state that cannot be otherwise fetched (see how config isn't emitted since an observer should already have it)\\r\\n        emit Scheduled(containerHash, _container.payload);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Executes an action after its execution delay has passed and its state hasn't been altered by a challenge or veto\\r\\n     * @param _container A ERC3000Data.Container struct holding both the payload being scheduled for execution and\\r\\n     * the current configuration of the system\\r\\n     */\\r\\n    function execute(ERC3000Data.Container memory _container)\\r\\n        public\\r\\n        override\\r\\n        auth(this.execute.selector) // in most instances this will be open for any addr, but leaving configurable for flexibility\\r\\n        returns (bytes32 failureMap, bytes[] memory)\\r\\n    {\\r\\n        // ensure enough time has passed\\r\\n        require(\\r\\n            block.timestamp >= _container.payload.executionTime,\\r\\n            'queue: wait more'\\r\\n        );\\r\\n\\r\\n        bytes32 containerHash = _container.hash();\\r\\n        queue[containerHash].checkAndSetState(\\r\\n            GovernQueueStateLib.State.Scheduled, // note that we will revert here if the container wasn't previously scheduled\\r\\n            GovernQueueStateLib.State.Executed\\r\\n        );\\r\\n\\r\\n        _container.config.scheduleDeposit.releaseTo(\\r\\n            _container.payload.submitter\\r\\n        ); // release collateral to original submitter\\r\\n\\r\\n        return _execute(_container.payload, containerHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Challenge a container in case its scheduling is illegal as per Config.rules. Pulls collateral and dispute fees from sender into contract\\r\\n     * @param _container A ERC3000Data.Container struct holding both the payload being scheduled for execution and\\r\\n     * the current configuration of the system\\r\\n     * @param _reason Hint for case reviewers as to why the scheduled container is illegal\\r\\n     */\\r\\n    function challenge(\\r\\n        ERC3000Data.Container memory _container,\\r\\n        bytes memory _reason\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n        auth(this.challenge.selector)\\r\\n        returns (uint256 disputeId)\\r\\n    {\\r\\n        bytes32 containerHash = _container.hash();\\r\\n        challengerCache[containerHash] = msg.sender; // cache challenger address while it is needed\\r\\n        queue[containerHash].checkAndSetState(\\r\\n            GovernQueueStateLib.State.Scheduled,\\r\\n            GovernQueueStateLib.State.Challenged\\r\\n        );\\r\\n\\r\\n        ERC3000Data.Collateral memory collateral = _container\\r\\n            .config\\r\\n            .challengeDeposit;\\r\\n        collateral.collectFrom(msg.sender); // pull challenge collateral from sender\\r\\n\\r\\n        // create dispute on arbitrator\\r\\n        IArbitrator arbitrator = IArbitrator(_container.config.resolver);\\r\\n        (address recipient, ERC20 feeToken, uint256 feeAmount) = arbitrator\\r\\n            .getDisputeFees();\\r\\n        require(\\r\\n            feeToken.safeTransferFrom(msg.sender, address(this), feeAmount),\\r\\n            'queue: bad fee pull'\\r\\n        );\\r\\n        require(\\r\\n            feeToken.safeApprove(recipient, feeAmount),\\r\\n            'queue: bad approve'\\r\\n        );\\r\\n        _container.payload.challenger = msg.sender;\\r\\n        disputeId = arbitrator.createDispute(2, abi.encode(_container)); // create dispute sending full container ABI encoded (could prob just send payload to save gas)\\r\\n        require(feeToken.safeApprove(recipient, 0), 'queue: bad reset'); // reset just in case non-compliant tokens (that fail on non-zero to non-zero approvals) are used\\r\\n\\r\\n        // submit both arguments as evidence and close evidence period. no more evidence can be submitted and a settlement can't happen (could happen off-protocol)\\r\\n        arbitrator.submitEvidence(\\r\\n            disputeId,\\r\\n            _container.payload.submitter,\\r\\n            _container.payload.proof\\r\\n        );\\r\\n        arbitrator.submitEvidence(disputeId, msg.sender, _reason);\\r\\n        arbitrator.closeEvidencePeriod(disputeId);\\r\\n\\r\\n        disputeItemCache[containerHash][arbitrator] = disputeId + 1; // cache a relation between disputeId and containerHash while needed\\r\\n\\r\\n        emit Challenged(\\r\\n            containerHash,\\r\\n            msg.sender,\\r\\n            _reason,\\r\\n            disputeId,\\r\\n            collateral\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Apply arbitrator's ruling over a challenge once it has come to a final ruling\\r\\n     * @param _container A ERC3000Data.Container struct holding both the payload being scheduled for execution and\\r\\n     * the current configuration of the system\\r\\n     * @param _disputeId disputeId in the arbitrator in which the dispute over the container was created\\r\\n     */\\r\\n    function resolve(\\r\\n        ERC3000Data.Container memory _container,\\r\\n        uint256 _disputeId\\r\\n    ) public override returns (bytes32 failureMap, bytes[] memory) {\\r\\n        bytes32 containerHash = _container.hash();\\r\\n        IArbitrator arbitrator = IArbitrator(_container.config.resolver);\\r\\n\\r\\n        require(\\r\\n            disputeItemCache[containerHash][arbitrator] == _disputeId + 1,\\r\\n            'queue: bad dispute id'\\r\\n        );\\r\\n        delete disputeItemCache[containerHash][arbitrator]; // release state to refund gas; no longer needed in state\\r\\n\\r\\n        queue[containerHash].checkState(GovernQueueStateLib.State.Challenged);\\r\\n        (address subject, uint256 ruling) = arbitrator.rule(_disputeId);\\r\\n        require(subject == address(this), 'queue: not subject');\\r\\n        bool arbitratorApproved = ruling == ALLOW_RULING;\\r\\n\\r\\n        queue[containerHash].setState(\\r\\n            arbitratorApproved\\r\\n                ? GovernQueueStateLib.State.Approved\\r\\n                : GovernQueueStateLib.State.Rejected\\r\\n        );\\r\\n\\r\\n        emit Resolved(containerHash, msg.sender, arbitratorApproved);\\r\\n        emit Ruled(arbitrator, _disputeId, ruling);\\r\\n\\r\\n        if (arbitratorApproved) {\\r\\n            return _executeApproved(_container);\\r\\n        } else {\\r\\n            return _settleRejection(_container);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function veto(ERC3000Data.Container memory _container, bytes memory _reason)\\r\\n        public\\r\\n        override\\r\\n        auth(this.veto.selector)\\r\\n    {\\r\\n        bytes32 containerHash = _container.hash();\\r\\n        GovernQueueStateLib.Item storage item = queue[containerHash];\\r\\n\\r\\n        if (item.state == GovernQueueStateLib.State.Challenged) {\\r\\n            item.checkAndSetState(\\r\\n                GovernQueueStateLib.State.Challenged,\\r\\n                GovernQueueStateLib.State.Cancelled\\r\\n            );\\r\\n\\r\\n            address challenger = challengerCache[containerHash];\\r\\n            // release state to refund gas; no longer needed in state\\r\\n            delete challengerCache[containerHash];\\r\\n            delete disputeItemCache[containerHash][\\r\\n                IArbitrator(_container.config.resolver)\\r\\n            ];\\r\\n\\r\\n            // release collateral to challenger and scheduler\\r\\n            _container.config.scheduleDeposit.releaseTo(\\r\\n                _container.payload.submitter\\r\\n            );\\r\\n            _container.config.challengeDeposit.releaseTo(challenger);\\r\\n        } else {\\r\\n            // If the given container doesn't have the state Challenged\\r\\n            // has it to be the Scheduled state and otherwise should it throw as expected\\r\\n            item.checkAndSetState(\\r\\n                GovernQueueStateLib.State.Scheduled,\\r\\n                GovernQueueStateLib.State.Cancelled\\r\\n            );\\r\\n\\r\\n            _container.config.scheduleDeposit.releaseTo(\\r\\n                _container.payload.submitter\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit Vetoed(containerHash, msg.sender, _reason);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Apply a new configuration for all *new* containers to be scheduled\\r\\n     * @param _config A ERC3000Data.Config struct holding all the new params that will control the queue\\r\\n     */\\r\\n    function configure(ERC3000Data.Config memory _config)\\r\\n        public\\r\\n        override\\r\\n        auth(this.configure.selector)\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return _setConfig(_config);\\r\\n    }\\r\\n\\r\\n    // Internal\\r\\n\\r\\n    function _executeApproved(ERC3000Data.Container memory _container)\\r\\n        internal\\r\\n        returns (bytes32 failureMap, bytes[] memory)\\r\\n    {\\r\\n        bytes32 containerHash = _container.hash();\\r\\n        queue[containerHash].checkAndSetState(\\r\\n            GovernQueueStateLib.State.Approved,\\r\\n            GovernQueueStateLib.State.Executed\\r\\n        );\\r\\n\\r\\n        delete challengerCache[containerHash]; // release state to refund gas; no longer needed in state\\r\\n\\r\\n        // release all collateral to submitter\\r\\n        _container.config.scheduleDeposit.releaseTo(\\r\\n            _container.payload.submitter\\r\\n        );\\r\\n        _container.config.challengeDeposit.releaseTo(\\r\\n            _container.payload.submitter\\r\\n        );\\r\\n\\r\\n        return _execute(_container.payload, containerHash);\\r\\n    }\\r\\n\\r\\n    function _settleRejection(ERC3000Data.Container memory _container)\\r\\n        internal\\r\\n        returns (bytes32, bytes[] memory)\\r\\n    {\\r\\n        bytes32 containerHash = _container.hash();\\r\\n        queue[containerHash].checkAndSetState(\\r\\n            GovernQueueStateLib.State.Rejected,\\r\\n            GovernQueueStateLib.State.Cancelled\\r\\n        );\\r\\n\\r\\n        address challenger = challengerCache[containerHash];\\r\\n        delete challengerCache[containerHash]; // release state to refund gas; no longer needed in state\\r\\n\\r\\n        // release all collateral to challenger\\r\\n        _container.config.scheduleDeposit.releaseTo(challenger);\\r\\n        _container.config.challengeDeposit.releaseTo(challenger);\\r\\n\\r\\n        // return zero values as nothing is executed on rejection\\r\\n    }\\r\\n\\r\\n    function _execute(\\r\\n        ERC3000Data.Payload memory _payload,\\r\\n        bytes32 _containerHash\\r\\n    ) internal returns (bytes32, bytes[] memory) {\\r\\n        emit Executed(_containerHash, msg.sender);\\r\\n        return\\r\\n            _payload.executor.exec(\\r\\n                _payload.actions,\\r\\n                _payload.allowFailuresMap,\\r\\n                _containerHash\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _setConfig(ERC3000Data.Config memory _config)\\r\\n        internal\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        // validate collaterals by calling balanceOf on their interface\\r\\n        if (\\r\\n            _config.challengeDeposit.amount != 0 &&\\r\\n            _config.challengeDeposit.token != address(0)\\r\\n        ) {\\r\\n            (bool ok, bytes memory value) = _config.challengeDeposit.token.call(\\r\\n                abi.encodeWithSelector(ERC20.balanceOf.selector, address(this))\\r\\n            );\\r\\n            require(ok && value.length > 0, 'queue: bad config');\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            _config.scheduleDeposit.amount != 0 &&\\r\\n            _config.scheduleDeposit.token != address(0)\\r\\n        ) {\\r\\n            (bool ok, bytes memory value) = _config.scheduleDeposit.token.call(\\r\\n                abi.encodeWithSelector(ERC20.balanceOf.selector, address(this))\\r\\n            );\\r\\n            require(ok && value.length > 0, 'queue: bad config');\\r\\n        }\\r\\n\\r\\n        configHash = _config.hash();\\r\\n\\r\\n        emit Configured(configHash, msg.sender, _config);\\r\\n\\r\\n        return configHash;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8e176124c95a77fd82ae49d2f14d094214979bd2505d3725dcdf9cb446ba5632\",\"license\":\"GPL-3.0\"},\"contracts/protocol/IArbitrable.sol\":{\"content\":\"/*\\r\\n * SPDX-License-Identifier:    MIT\\r\\n */\\r\\n\\r\\n// From https://github.com/aragon/protocol/blob/f1b3361a160da92b9bb449c0a05dee0c30e41594/packages/evm/contracts/arbitration/IArbitrable.sol\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\nimport \\\"./IArbitrator.sol\\\";\\r\\n\\r\\n/**\\r\\n* @dev The Arbitrable instances actually don't require to follow any specific interface.\\r\\n*      Note that this is actually optional, although it does allow the Protocol to at least have a way to identify a specific set of instances.\\r\\n*/\\r\\nabstract contract IArbitrable {\\r\\n    /**\\r\\n    * @dev Emitted when an IArbitrable instance's dispute is ruled by an IArbitrator\\r\\n    * @param arbitrator IArbitrator instance ruling the dispute\\r\\n    * @param disputeId Identification number of the dispute being ruled by the arbitrator\\r\\n    * @param ruling Ruling given by the arbitrator\\r\\n    */\\r\\n    event Ruled(IArbitrator indexed arbitrator, uint256 indexed disputeId, uint256 ruling);\\r\\n}\\r\\n\",\"keccak256\":\"0xc1d6d10d63c3ddae0e54a0f9ddac4346f9aa17c6cf94038f411f86e318c19825\",\"license\":\"MIT\"},\"contracts/protocol/IArbitrator.sol\":{\"content\":\"/*\\r\\n * SPDX-License-Identifier:    MIT\\r\\n */\\r\\n\\r\\n// From https://github.com/aragon/protocol/blob/f1b3361a160da92b9bb449c0a05dee0c30e41594/packages/evm/contracts/arbitration/IArbitrator.sol\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\nimport \\\"@aragon/govern-contract-utils/contracts/erc20/ERC20.sol\\\";\\r\\n\\r\\ninterface IArbitrator {\\r\\n    /**\\r\\n    * @dev Create a dispute over the Arbitrable sender with a number of possible rulings\\r\\n    * @param _possibleRulings Number of possible rulings allowed for the dispute\\r\\n    * @param _metadata Optional metadata that can be used to provide additional information on the dispute to be created\\r\\n    * @return Dispute identification number\\r\\n    */\\r\\n    function createDispute(uint256 _possibleRulings, bytes calldata _metadata) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n    * @dev Submit evidence for a dispute\\r\\n    * @param _disputeId Id of the dispute in the Protocol\\r\\n    * @param _submitter Address of the account submitting the evidence\\r\\n    * @param _evidence Data submitted for the evidence related to the dispute\\r\\n    */\\r\\n    function submitEvidence(uint256 _disputeId, address _submitter, bytes calldata _evidence) external;\\r\\n\\r\\n    /**\\r\\n    * @dev Close the evidence period of a dispute\\r\\n    * @param _disputeId Identification number of the dispute to close its evidence submitting period\\r\\n    */\\r\\n    function closeEvidencePeriod(uint256 _disputeId) external;\\r\\n\\r\\n    /**\\r\\n    * @notice Rule dispute #`_disputeId` if ready\\r\\n    * @param _disputeId Identification number of the dispute to be ruled\\r\\n    * @return subject Subject associated to the dispute\\r\\n    * @return ruling Ruling number computed for the given dispute\\r\\n    */\\r\\n    function rule(uint256 _disputeId) external returns (address subject, uint256 ruling);\\r\\n\\r\\n    /**\\r\\n    * @dev Tell the dispute fees information to create a dispute\\r\\n    * @return recipient Address where the corresponding dispute fees must be transferred to\\r\\n    * @return feeToken ERC20 token used for the fees\\r\\n    * @return feeAmount Total amount of fees that must be allowed to the recipient\\r\\n    */\\r\\n    function getDisputeFees() external view returns (address recipient, ERC20 feeToken, uint256 feeAmount);\\r\\n\\r\\n    /**\\r\\n    * @dev Tell the payments recipient address\\r\\n    * @return Address of the payments recipient module\\r\\n    */\\r\\n    function getPaymentsRecipient() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xbd3a8516ceb57f7ba6a10bc785176896d5411a8a57c91bc7756dd5592fc3bc18\",\"license\":\"MIT\"},\"contracts/protocol/IExecutable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\ninterface IExecutable {\\r\\n    function canExecute(address executer) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xc844c648801007a25b4ca71350b41813b1f51a44f81d85c0853c0213c50271d7\",\"license\":\"MIT\"},\"erc3k/contracts/ERC3000Data.sol\":{\"content\":\"/*\\r\\n * SPDX-License-Identifier:    MIT\\r\\n */\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport './IERC3000Executor.sol';\\r\\n\\r\\nlibrary ERC3000Data {\\r\\n    // TODO: come up with a non-shitty name\\r\\n    struct Container {\\r\\n        Payload payload;\\r\\n        Config config;\\r\\n    }\\r\\n\\r\\n    // WARN: Always remember to change the 'hash' function if modifying the struct\\r\\n    struct Payload {\\r\\n        uint256 nonce;\\r\\n        uint256 executionTime;\\r\\n        address submitter;\\r\\n        IERC3000Executor executor;\\r\\n        Action[] actions;\\r\\n        bytes32 allowFailuresMap;\\r\\n        bytes proof;\\r\\n        address challenger;\\r\\n    }\\r\\n\\r\\n    struct Action {\\r\\n        address to;\\r\\n        uint256 value;\\r\\n        bytes data;\\r\\n    }\\r\\n\\r\\n    struct Config {\\r\\n        uint256 executionDelay; // how many seconds to wait before being able to call `execute`.\\r\\n        Collateral scheduleDeposit; // fees for scheduling\\r\\n        Collateral challengeDeposit; // fees for challenging\\r\\n        address resolver; // resolver that will rule the disputes\\r\\n        bytes rules; // rules of how DAO should be managed\\r\\n        uint256 maxCalldataSize; // max calldatasize for the schedule\\r\\n    }\\r\\n\\r\\n    struct Collateral {\\r\\n        address token;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    function containerHash(bytes32 payloadHash, bytes32 configHash)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        uint256 chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    'erc3k-v1',\\r\\n                    address(this),\\r\\n                    chainId,\\r\\n                    payloadHash,\\r\\n                    configHash\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function hash(Container memory container) internal view returns (bytes32) {\\r\\n        return containerHash(hash(container.payload), hash(container.config));\\r\\n    }\\r\\n\\r\\n    function hash(Payload memory payload) internal pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    payload.nonce,\\r\\n                    payload.executionTime,\\r\\n                    payload.submitter,\\r\\n                    payload.executor,\\r\\n                    keccak256(abi.encode(payload.actions)),\\r\\n                    payload.allowFailuresMap,\\r\\n                    keccak256(payload.proof)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function hash(Config memory config) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(config));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x87ea60c9847b7e4a7dff929d0e7bb6d77993f2b74326335927f9b0c7c6b63b6a\",\"license\":\"MIT\"},\"erc3k/contracts/IERC3000.sol\":{\"content\":\"/*\\r\\n * SPDX-License-Identifier:    MIT\\r\\n */\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ERC3000Data.sol\\\";\\r\\n\\r\\nabstract contract IERC3000 {\\r\\n    /**\\r\\n     * @notice Schedules an action for execution, allowing for challenges and vetos on a defined time window\\r\\n     * @param container A Container struct holding both the payload being scheduled for execution and\\r\\n     * the current configuration of the system\\r\\n     * @return containerHash\\r\\n     */\\r\\n    function schedule(ERC3000Data.Container memory container) virtual public returns (bytes32 containerHash);\\r\\n    event Scheduled(bytes32 indexed containerHash, ERC3000Data.Payload payload);\\r\\n\\r\\n    /**\\r\\n     * @notice Executes an action after its execution delay has passed and its state hasn't been altered by a challenge or veto\\r\\n     * @param container A ERC3000Data.Container struct holding both the payload being scheduled for execution and\\r\\n     * the current configuration of the system\\r\\n     * MUST be an ERC3000Executor call: payload.executor.exec(payload.actions)\\r\\n     * @return failureMap\\r\\n     * @return execResults\\r\\n     */\\r\\n    function execute(ERC3000Data.Container memory container) virtual public returns (bytes32 failureMap, bytes[] memory execResults);\\r\\n    event Executed(bytes32 indexed containerHash, address indexed actor);\\r\\n\\r\\n    /**\\r\\n     * @notice Challenge a container in case its scheduling is illegal as per Config.rules. Pulls collateral and dispute fees from sender into contract\\r\\n     * @param container A ERC3000Data.Container struct holding both the payload being scheduled for execution and\\r\\n     * the current configuration of the system\\r\\n     * @param reason Hint for case reviewers as to why the scheduled container is illegal\\r\\n     * @return resolverId\\r\\n     */\\r\\n    function challenge(ERC3000Data.Container memory container, bytes memory reason) virtual public returns (uint256 resolverId);\\r\\n    event Challenged(bytes32 indexed containerHash, address indexed actor, bytes reason, uint256 resolverId, ERC3000Data.Collateral collateral);\\r\\n\\r\\n    /**\\r\\n     * @notice Apply arbitrator's ruling over a challenge once it has come to a final ruling\\r\\n     * @param container A ERC3000Data.Container struct holding both the payload being scheduled for execution and\\r\\n     * the current configuration of the system\\r\\n     * @param resolverId disputeId in the arbitrator in which the dispute over the container was created\\r\\n     * @return failureMap\\r\\n     * @return execResults\\r\\n     */\\r\\n    function resolve(ERC3000Data.Container memory container, uint256 resolverId) virtual public returns (bytes32 failureMap, bytes[] memory execResults);\\r\\n    event Resolved(bytes32 indexed containerHash, address indexed actor, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @notice Apply arbitrator's ruling over a challenge once it has come to a final ruling\\r\\n     * @param container A ERC3000Data.Container struct holding both the payload being scheduled for execution and\\r\\n     * the current configuration of the system\\r\\n     * @param reason Justification for the veto\\r\\n     */\\r\\n    function veto(ERC3000Data.Container memory container, bytes memory reason) virtual public;\\r\\n    event Vetoed(bytes32 indexed containerHash, address indexed actor, bytes reason);\\r\\n\\r\\n    /**\\r\\n     * @notice Apply a new configuration for all *new* containers to be scheduled\\r\\n     * @param config A ERC3000Data.Config struct holding all the new params that will control the system\\r\\n     * @return configHash\\r\\n     */\\r\\n    function configure(ERC3000Data.Config memory config) virtual public returns (bytes32 configHash);\\r\\n    event Configured(bytes32 indexed configHash, address indexed actor, ERC3000Data.Config config);\\r\\n}\\r\\n\",\"keccak256\":\"0x63434aa74e50d56a4196c819744211b6737a2916a8b14acc3d2d77744a59676d\",\"license\":\"MIT\"},\"erc3k/contracts/IERC3000Executor.sol\":{\"content\":\"/*\\r\\n * SPDX-License-Identifier:    MIT\\r\\n */\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ERC3000Data.sol\\\";\\r\\n\\r\\nabstract contract IERC3000Executor {\\r\\n    bytes4 internal constant ERC3000_EXEC_INTERFACE_ID = this.exec.selector;\\r\\n\\r\\n    /**\\r\\n     * @notice Executes all given actions\\r\\n     * @param actions A array of ERC3000Data.Action for later executing those\\r\\n     * @param allowFailuresMap A map with the allowed failures\\r\\n     * @param memo The hash of the ERC3000Data.Container\\r\\n     * @return failureMap\\r\\n     * @return execResults\\r\\n     */\\r\\n    function exec(ERC3000Data.Action[] memory actions, bytes32 allowFailuresMap, bytes32 memo) virtual public returns (bytes32 failureMap, bytes[] memory execResults);\\r\\n    event Executed(address indexed actor, ERC3000Data.Action[] actions, bytes32 memo, bytes32 failureMap, bytes[] execResults);\\r\\n}\\r\\n\",\"keccak256\":\"0xe124eb06798a1d2457d8e9bad5ae55abd63e6d7d9d4babb7408df67e8e8357b3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101825760003560e01c806396fc8abd116100d8578063bdf9a7261161008c578063cc1d4cab11610066578063cc1d4cab14610334578063e1f1176d14610347578063f87983b91461034f57610182565b8063bdf9a726146102fb578063c1862a791461030e578063c8182af01461032157610182565b8063a2157227116100bd578063a2157227146102bf578063affed0e0146102d2578063b57fc917146102da57610182565b806396fc8abd1461028c578063a157a10d146102ac57610182565b8063495a98251161013a5780637c10dea6116101145780637c10dea6146102445780637e8c7f08146102645780638f8b35b21461027957610182565b8063495a98251461020b578063588497341461021e5780637744efda1461023157610182565b80631c47671b1161016b5780631c47671b146101c557806338ccfbc8146101d85780633e2da6a9146101f857610182565b806301f75f351461018757806301ffc9a71461019c575b600080fd5b61019a610195366004612af1565b610362565b005b6101af6101aa36600461296d565b610524565b6040516101bc9190612e93565b60405180910390f35b61019a6101d3366004612803565b610556565b6101eb6101e6366004612af1565b610677565b6040516101bc9190612e9e565b6101eb61020636600461293e565b610b20565b6101af61021936600461296d565b610b3d565b61019a61022c366004612989565b610b70565b6101eb61023f366004612a8b565b610be5565b610257610252366004612890565b610c5d565b6040516101bc9190612faf565b61026c610c72565b6040516101bc9190612f2d565b61019a610287366004612788565b610c7d565b61029f61029a366004612989565b610e16565b6040516101bc9190612e0a565b61019a6102ba366004612989565b610e3c565b61019a6102cd3660046129b6565b610eac565b6101eb610f1d565b6102ed6102e8366004612b48565b610f23565b6040516101bc929190612ea7565b61019a61030936600461296d565b611151565b6101eb61031c366004612abe565b6111c4565b61029f61032f366004612890565b611499565b6101eb610342366004612a00565b6114b4565b6101eb6114d1565b6102ed61035d366004612abe565b6114d7565b6301f75f3560e01b6103ac81336000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115fc92505050565b6103d15760405162461bcd60e51b81526004016103c890613081565b60405180910390fd5b60006103dc84611642565b60008181526006602052604090209091506002815460ff1660068111156103ff57fe5b14156104ab57610418816002600563ffffffff61166616565b6000828152600760209081526040808320805473ffffffffffffffffffffffffffffffffffffffff198116909155600883528184208984018051606001516001600160a01b0390811687529185528386209590955589519092015193519092015191169161048c919063ffffffff61167a16565b6020860151604001516104a5908263ffffffff61167a16565b506104db565b6104be816001600563ffffffff61166616565b84516040015160208087015101516104db9163ffffffff61167a16565b336001600160a01b0316827fe2530b9681f9726904f9ca7fe725c0c53ea1b72370981ac6a5beaa9758c8c356866040516105159190612f74565b60405180910390a35050505050565b6001600160e01b0319811660009081526020819052604081205460ff168061055057506105508261171b565b92915050565b60408051602036601f810182900482028301820190935282825263161b7d8160e21b926105a09284923392600091819084018382808284376000920191909152506115fc92505050565b6105bc5760405162461bcd60e51b81526004016103c890613081565b60005b82811015610671576105cf6123b7565b8484838181106105db57fe5b9050606002018036038101906105f19190612a33565b905060008151600281111561060257fe5b141561061f5761061a8160200151826040015161174d565b610668565b60018151600281111561062e57fe5b14156106465761061a81602001518260400151611759565b60028151600281111561065557fe5b14156106685761066881602001516117f7565b506001016105bf565b50505050565b60006338ccfbc860e01b6106c381336000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115fc92505050565b6106df5760405162461bcd60e51b81526004016103c890613081565b60006106ea85611642565b6000818152600760209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19163317905560069091529020909150610735906001600263ffffffff61166616565b61073d6123d9565b50602085015160400151610757813363ffffffff61188c16565b600086602001516060015190506000806000836001600160a01b0316637b751b9e6040518163ffffffff1660e01b815260040160606040518083038186803b1580156107a257600080fd5b505afa1580156107b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107da9190612746565b919450925090506107fc6001600160a01b03831633308463ffffffff61192216565b6108185760405162461bcd60e51b81526004016103c890613194565b6108326001600160a01b038316848363ffffffff6119a016565b61084e5760405162461bcd60e51b81526004016103c890613270565b89513360e0909101526040516001600160a01b0385169063c13517e19060029061087c908e90602001613498565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016108a8929190612fc3565b602060405180830381600087803b1580156108c257600080fd5b505af11580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa9190612b8b565b97506109176001600160a01b03831684600063ffffffff6119a016565b6109335760405162461bcd60e51b81526004016103c89061315d565b895160408082015160c09092015190517f7cb57c640000000000000000000000000000000000000000000000000000000081526001600160a01b03871692637cb57c6492610987928d9291906004016134e4565b600060405180830381600087803b1580156109a157600080fd5b505af11580156109b5573d6000803e3d6000fd5b50506040517f7cb57c640000000000000000000000000000000000000000000000000000000081526001600160a01b0387169250637cb57c649150610a02908b9033908e906004016134e4565b600060405180830381600087803b158015610a1c57600080fd5b505af1158015610a30573d6000803e3d6000fd5b50506040517f7e9adccf0000000000000000000000000000000000000000000000000000000081526001600160a01b0387169250637e9adccf9150610a79908b90600401612e9e565b600060405180830381600087803b158015610a9357600080fd5b505af1158015610aa7573d6000803e3d6000fd5b50505060008781526008602090815260408083206001600160a01b03891684529091529081902060018b0190555133915087907f429df837eb45b6713f725a0d3e57db939fd7dd7d58bb3cd967fa37091572db9f90610b0b908d908d908b90612f87565b60405180910390a35050505050505092915050565b600860209081526000928352604080842090915290825290205481565b6001600160e01b031916600090815260036020908152604080832060018085529252909120546001600160a01b03161490565b60408051602036601f810182900482028301820190935282825263161b7d8160e21b92610bba9284923392600091819084018382808284376000920191909152506115fc92505050565b610bd65760405162461bcd60e51b81526004016103c890613081565b610be08383611759565b505050565b6000637744efda60e01b610c3181336000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115fc92505050565b610c4d5760405162461bcd60e51b81526004016103c890613081565b610c5683611a1b565b9392505050565b60066020526000908152604090205460ff1681565b63161b7d8160e21b81565b816002604051610c8c90612d79565b90815260200160405180910390205460001415610cb157610cac81611cad565b610d0a565b6001600160a01b0381811660009081527fd87da3e1f08043464b74e6b0861ccd8d8a5174e228287ac9b9f6efc1673da4ec602052604090205416600214610d0a5760405162461bcd60e51b81526004016103c8906133e0565b6040518060400160405280600581526020017f7175657565000000000000000000000000000000000000000000000000000000815250600281604051610d509190612d5d565b908152602001604051809103902054600014610d7e5760405162461bcd60e51b81526004016103c8906132a7565b43600282604051610d8f9190612d5d565b90815260405190819003602001902055610da883611a1b565b50610dd27fc2ff2bf000000000000000000000000000000000000000000000000000000000611d95565b80604051610de09190612d5d565b604051908190038120907f7bc2a48a4a566e237a12186f19d985b0f76afc9d5290601edac19876253670c290600090a250505050565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b60408051602036601f810182900482028301820190935282825263161b7d8160e21b92610e869284923392600091819084018382808284376000920191909152506115fc92505050565b610ea25760405162461bcd60e51b81526004016103c890613081565b610be0838361174d565b60408051602036601f810182900482028301820190935282825263161b7d8160e21b92610ef69284923392600091819084018382808284376000920191909152506115fc92505050565b610f125760405162461bcd60e51b81526004016103c890613081565b610671848484611df4565b60055481565b600060606000610f3285611642565b6020808701516060015160008381526008835260408082206001600160a01b03841683529093529190912054919250906001860114610f835760405162461bcd60e51b81526004016103c8906130b8565b60008281526008602090815260408083206001600160a01b0385168452825280832083905584835260069091529020610fc390600263ffffffff611ed816565b600080826001600160a01b031663db18af6c886040518263ffffffff1660e01b8152600401610ff29190612e9e565b6040805180830381600087803b15801561100b57600080fd5b505af115801561101f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104391906127d6565b90925090506001600160a01b03821630146110705760405162461bcd60e51b81526004016103c890613372565b600481146110a081611083576004611086565b60035b60008781526006602052604090209063ffffffff611f1116565b336001600160a01b0316857f027d8a5d945eb361475964ed2c71b8332b27af2d630ab5daf829d67afd2584e6836040516110da9190612e93565b60405180910390a387846001600160a01b03167f56c8631a8915c0d362dbe57a61215fdde954f73f81c8a3a1f55572fb015207b18460405161111c9190612e9e565b60405180910390a380156111415761113389611f32565b96509650505050505061114a565b61113389611fe8565b9250929050565b60408051602036601f810182900482028301820190935282825263161b7d8160e21b9261119b9284923392600091819084018382808284376000920191909152506115fc92505050565b6111b75760405162461bcd60e51b81526004016103c890613081565b6111c0826117f7565b5050565b600063c1862a7960e01b61121081336000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115fc92505050565b61122c5760405162461bcd60e51b81526004016103c890613081565b6005805460010190819055835151146112575760405162461bcd60e51b81526004016103c8906130ef565b600061126684602001516115cc565b905060045481146112895760405162461bcd60e51b81526004016103c89061304a565b60208401515161129f904263ffffffff61208d16565b84516020015110156112c35760405162461bcd60e51b81526004016103c890613126565b8351604001516001600160a01b031633146112f05760405162461bcd60e51b81526004016103c8906131cb565b602084015160a00151369081111561131a5760405162461bcd60e51b81526004016103c8906133a9565b60005b855160800151518110156113f2576000866000015160800151828151811061134157fe5b6020026020010151600001519050806001600160a01b03166385c99e2b336040518263ffffffff1660e01b815260040161137b9190612e0a565b602060405180830381600087803b15801561139557600080fd5b505af11580156113a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cd9190612870565b6113e95760405162461bcd60e51b81526004016103c890613239565b5060010161131d565b5061140961140386600001516120b0565b83612118565b600081815260066020526040812091955061142c9190600163ffffffff61166616565b6114346123d9565b50602080860151015185516040015161145490829063ffffffff61188c16565b847fec86306f95de4940876ce5e76fac6a93a32a6d720735be72b86d00524e3ea595876000015160405161148891906134d1565b60405180910390a250505050919050565b6007602052600090815260409020546001600160a01b031681565b805160208183018101805160028252928201919093012091525481565b60045481565b6000606063f87983b960e01b61152581336000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115fc92505050565b6115415760405162461bcd60e51b81526004016103c890613081565b8351602001514210156115665760405162461bcd60e51b81526004016103c890613304565b600061157185611642565b6000818152600660208190526040909120919250611598919060019063ffffffff61166616565b84516040015160208087015101516115b59163ffffffff61167a16565b84516115c19082612153565b935093505050915091565b6000816040516020016115df9190613485565b604051602081830303815290604052805190602001209050919050565b6000611609848484612222565b8061163a575061163a847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84612222565b949350505050565b600061055061165483600001516120b0565b61166184602001516115cc565b612118565b6116708383611ed8565b610be08382611f11565b6020820151156111c057815160208301516116a7906001600160a01b03831690849063ffffffff61232d16565b6116c35760405162461bcd60e51b81526004016103c890612fdc565b816001600160a01b031683600001516001600160a01b03167fe6e0ef9cd056ca98561ca60e347ada61e1ede2f1142a078951b7a52e1e508e60856020015160405161170e9190612e9e565b60405180910390a3505050565b6001600160e01b031981167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b6111c082826002611df4565b61176282610b3d565b1561177f5760405162461bcd60e51b81526004016103c890613202565b6001600160e01b0319821660008181526003602090815260408083206001600160a01b0386168085529252808320805473ffffffffffffffffffffffffffffffffffffffff19169055519092339290917f682f2c466c1e9f6883eb72cbced01373e1cb18b05ae5c8bc04dc73d73e29f8cd9190a45050565b61180081610b3d565b1561181d5760405162461bcd60e51b81526004016103c890613202565b6001600160e01b03198116600081815260036020908152604080832060018085529252808320805473ffffffffffffffffffffffffffffffffffffffff1916909217909155513392917f049c6b8b07a879425742523fa80f8ffb25e39ad518c93a5896a0df19518397e591a350565b6020820151156111c057815160208301516118bb906001600160a01b038316908490309063ffffffff61192216565b6118d75760405162461bcd60e51b81526004016103c89061333b565b816001600160a01b031683600001516001600160a01b03167f989eaa915cbb416ea3d6f9a63b1a3de51770c7674b11fe21ecdf76b4e1d13910856020015160405161170e9190612e9e565b600060606323b872dd60e01b85858560405160240161194393929190612e1e565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909316929092179091529050611996868261234c565b9695505050505050565b6000606063095ea7b360e01b84846040516024016119bf929190612e42565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909316929092179091529050611a12858261234c565b95945050505050565b6000816040015160200151600014158015611a4357506040820151516001600160a01b031615155b15611b3e57600060608360400151600001516001600160a01b03166370a0823160e01b30604051602401611a779190612e0a565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909416939093179092529051611aca9190612d5d565b6000604051808303816000865af19150503d8060008114611b07576040519150601f19603f3d011682016040523d82523d6000602084013e611b0c565b606091505b5091509150818015611b1f575060008151115b611b3b5760405162461bcd60e51b81526004016103c89061304a565b50505b602080830151015115801590611b6157506020820151516001600160a01b031615155b15611c5c57600060608360200151600001516001600160a01b03166370a0823160e01b30604051602401611b959190612e0a565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909416939093179092529051611be89190612d5d565b6000604051808303816000865af19150503d8060008114611c25576040519150601f19603f3d011682016040523d82523d6000602084013e611c2a565b606091505b5091509150818015611c3d575060008151115b611c595760405162461bcd60e51b81526004016103c89061304a565b50505b611c65826115cc565b60048190556040513391907f844435c59f7ccdf12de134e8f9b3b7d664fe9f06e3263680779599ba4097bc3f90611c9d908690613485565b60405180910390a3505060045490565b6040518060400160405280600381526020017f61636c0000000000000000000000000000000000000000000000000000000000815250600281604051611cf39190612d5d565b908152602001604051809103902054600014611d215760405162461bcd60e51b81526004016103c8906132a7565b43600282604051611d329190612d5d565b90815260405190819003602001902055611d5363161b7d8160e21b8361174d565b80604051611d619190612d5d565b604051908190038120907f7bc2a48a4a566e237a12186f19d985b0f76afc9d5290601edac19876253670c290600090a25050565b6001600160e01b0319811660009081526020819052604090819020805460ff19166001179055517fbf5e1f87f5ab65b58074cd29244d7c487a948983cda4b932e0f966b62bd34aca90611de9908390612f2d565b60405180910390a150565b611dfd83610b3d565b15611e1a5760405162461bcd60e51b81526004016103c890613202565b6001600160a01b03821660011415611e445760405162461bcd60e51b81526004016103c890613417565b6001600160e01b0319831660008181526003602090815260408083206001600160a01b038781168086529190935292819020805473ffffffffffffffffffffffffffffffffffffffff19169286169290921790915551909133917fc62063b81f7036fd97a0dc546516e99f11004d2d76ca0fddd3866346c86e709190611ecb908690612e0a565b60405180910390a4505050565b806006811115611ee457fe5b825460ff166006811115611ef457fe5b146111c05760405162461bcd60e51b81526004016103c890613013565b81548190839060ff19166001836006811115611f2957fe5b02179055505050565b600060606000611f4184611642565b6000818152600660208190526040909120919250611f68919060039063ffffffff61166616565b600081815260076020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff191690558551909101518582015190910151611fb29163ffffffff61167a16565b8351604090810151602086015190910151611fd29163ffffffff61167a16565b8351611fde9082612153565b9250925050915091565b600060606000611ff784611642565b600081815260066020526040902090915061201b906004600563ffffffff61166616565b6000818152600760209081526040909120805473ffffffffffffffffffffffffffffffffffffffff19811690915585820151909101516001600160a01b039091169061206d908263ffffffff61167a16565b602085015160400151612086908263ffffffff61167a16565b5050915091565b808201828110156105505760405162461bcd60e51b81526004016103c89061344e565b6000816000015182602001518360400151846060015185608001516040516020016120db9190612e5b565b604051602081830303815290604052805190602001208660a001518760c00151805190602001206040516020016115df979695949392919061350c565b6040516000904690612134903090839087908790602001612da2565b6040516020818303038152906040528051906020012091505092915050565b604051600090606090339084907f59c3746e635078efc737fb3f37dd8188203b8df10bbad35878a7d156f4f51c41908590a383606001516001600160a01b031663c2d85afc85608001518660a00151866040518463ffffffff1660e01b81526004016121c193929190612e6e565b600060405180830381600087803b1580156121db57600080fd5b505af11580156121ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261221791908101906128a8565b915091509250929050565b6001600160e01b0319831660009081526003602090815260408083206001600160a01b0380871685529252822054168015612322576001600160a01b03811660021415612273576001915050610c56565b6040517f097c81080000000000000000000000000000000000000000000000000000000081526001600160a01b0382169063097c8108906122bc90889088908890600401612f42565b602060405180830381600087803b1580156122d657600080fd5b505af1925050508015612306575060408051601f3d908101601f1916820190925261230391810190612870565b60015b61230f57612322565b801561232057600192505050610c56565b505b506000949350505050565b6000606063a9059cbb60e01b84846040516024016119bf929190612e42565b6000612360836001600160a01b03166123b1565b61236c57506000610550565b6040516020818451602086016000885af180156123a9573d801561239757602081146123a0576123a7565b600193506123a7565b8251151593505b505b505092915050565b3b151590565b6040805160608101909152806000815260006020820181905260409091015290565b604080518082019091526000808252602082015290565b8035610550816135df565b600082601f83011261240b578081fd5b813561241e6124198261356f565b613548565b818152915060208083019084810160005b848110156124b45781358701606080601f19838c0301121561245057600080fd5b61245981613548565b6124658b8785016123f0565b8152604080840135878301528284013567ffffffffffffffff81111561248a57600080fd5b6124988d89838801016124bf565b918301919091525086525050928201929082019060010161242f565b505050505092915050565b600082601f8301126124cf578081fd5b81356124dd6124198261358f565b91508082528360208285010111156124f457600080fd5b8060208401602084013760009082016020015292915050565b600082601f83011261251d578081fd5b815161252b6124198261358f565b915080825283602082850101111561254257600080fd5b6125538160208401602086016135b3565b5092915050565b60006040828403121561256b578081fd5b6125756040613548565b90508135612582816135df565b808252506020820135602082015292915050565b600061010082840312156125a8578081fd5b6125b260c0613548565b9050813581526125c5836020840161255a565b60208201526125d7836060840161255a565b604082015260a08201356125ea816135df565b606082015260c082013567ffffffffffffffff81111561260957600080fd5b612615848285016124bf565b60808301525060e082013560a082015292915050565b60006040828403121561263c578081fd5b6126466040613548565b9050813567ffffffffffffffff8082111561266057600080fd5b61010091840180860383131561267557600080fd5b61267e83613548565b813581526020820135602082015261269987604084016123f0565b60408201526126ab87606084016123f0565b606082015260808201359350828411156126c457600080fd5b6126d0878584016123fb565b608082015260a082013560a082015260c08201359350828411156126f357600080fd5b6126ff878584016124bf565b60c08201526127118760e084016123f0565b60e0820152845250602084013591508082111561272d57600080fd5b5061273a84828501612596565b60208301525092915050565b60008060006060848603121561275a578283fd5b8351612765816135df565b6020850151909350612776816135df565b80925050604084015190509250925092565b6000806040838503121561279a578182fd5b82356127a5816135df565b9150602083013567ffffffffffffffff8111156127c0578182fd5b6127cc85828601612596565b9150509250929050565b600080604083850312156127e8578182fd5b82516127f3816135df565b6020939093015192949293505050565b60008060208385031215612815578182fd5b823567ffffffffffffffff8082111561282c578384fd5b81850186601f82011261283d578485fd5b803592508183111561284d578485fd5b866020606085028301011115612861578485fd5b60200196919550909350505050565b600060208284031215612881578081fd5b81518015158114610c56578182fd5b6000602082840312156128a1578081fd5b5035919050565b600080604083850312156128ba578182fd5b8251915060208084015167ffffffffffffffff8111156128d8578283fd5b80850186601f8201126128e9578384fd5b805191506128f96124198361356f565b82815283810190828501865b8581101561292e5761291c8b88845188010161250d565b84529286019290860190600101612905565b5096999098509650505050505050565b60008060408385031215612950578182fd5b823591506020830135612962816135df565b809150509250929050565b60006020828403121561297e578081fd5b8135610c56816135f7565b6000806040838503121561299b578182fd5b82356129a6816135f7565b91506020830135612962816135df565b6000806000606084860312156129ca578081fd5b83356129d5816135f7565b925060208401356129e5816135df565b915060408401356129f5816135df565b809150509250925092565b600060208284031215612a11578081fd5b813567ffffffffffffffff811115612a27578182fd5b61163a848285016124bf565b600060608284031215612a44578081fd5b612a4e6060613548565b823560038110612a5c578283fd5b81526020830135612a6c816135f7565b60208201526040830135612a7f816135df565b60408201529392505050565b600060208284031215612a9c578081fd5b813567ffffffffffffffff811115612ab2578182fd5b61163a84828501612596565b600060208284031215612acf578081fd5b813567ffffffffffffffff811115612ae5578182fd5b61163a8482850161262b565b60008060408385031215612b03578182fd5b823567ffffffffffffffff80821115612b1a578384fd5b612b268683870161262b565b93506020850135915080821115612b3b578283fd5b506127cc858286016124bf565b60008060408385031215612b5a578182fd5b823567ffffffffffffffff811115612b70578283fd5b612b7c8582860161262b565b95602094909401359450505050565b600060208284031215612b9c578081fd5b5051919050565b6000815180845260208085018081965082840281019150828601855b85811015612c12578284038952815160606001600160a01b03825116865286820151878701526040808301518282890152612bfc83890182612c1f565b9c89019c97505050928601925050600101612bbf565b5091979650505050505050565b60008151808452612c378160208601602086016135b3565b601f01601f19169290920160200192915050565b80516001600160a01b03168252602090810151910152565b6000610100825184526020830151612c7e6020860182612c4b565b506040830151612c916060860182612c4b565b506001600160a01b0360608401511660a085015260808301518160c0860152612cbc82860182612c1f565b60a085015160e087015280935050505092915050565b6000610100825184526020830151602085015260408301516001600160a01b03808216604087015280606086015116606087015260808501519150826080870152612d1f83870183612ba3565b60a086015160a088015260c0860151935086810360c0880152612d428185612c1f565b9250508060e08601511660e087015250809250505092915050565b60008251612d6f8184602087016135b3565b9190910192915050565b7f61636c0000000000000000000000000000000000000000000000000000000000815260030190565b7f657263336b2d7631000000000000000000000000000000000000000000000000815260609490941b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166008850152601c840192909252603c830152605c820152607c0190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b600060208252610c566020830184612ba3565b600060608252612e816060830186612ba3565b60208301949094525060400152919050565b901515815260200190565b90815260200190565b600060408201848352602060408185015281855180845260608601915060608382028701019350828701855b82811015612f1f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018452612f0d868351612c1f565b95509284019290840190600101612ed3565b509398975050505050505050565b6001600160e01b031991909116815260200190565b60006001600160e01b0319851682526001600160a01b038416602083015260606040830152611a126060830184612c1f565b600060208252610c566020830184612c1f565b600060808252612f9a6080830186612c1f565b905083602083015261163a6040830184612c4b565b6020810160078310612fbd57fe5b91905290565b60008382526040602083015261163a6040830184612c1f565b6020808252601a908201527f6465706f7369743a2062616420746f6b656e2072656c65617365000000000000604082015260600190565b60208082526010908201527f71756575653a2062616420737461746500000000000000000000000000000000604082015260600190565b60208082526011908201527f71756575653a2062616420636f6e666967000000000000000000000000000000604082015260600190565b60208082526009908201527f61636c3a20617574680000000000000000000000000000000000000000000000604082015260600190565b60208082526015908201527f71756575653a2062616420646973707574652069640000000000000000000000604082015260600190565b60208082526010908201527f71756575653a20626164206e6f6e636500000000000000000000000000000000604082015260600190565b60208082526010908201527f71756575653a206261642064656c617900000000000000000000000000000000604082015260600190565b60208082526010908201527f71756575653a2062616420726573657400000000000000000000000000000000604082015260600190565b60208082526013908201527f71756575653a20626164206665652070756c6c00000000000000000000000000604082015260600190565b60208082526014908201527f71756575653a20626164207375626d6974746572000000000000000000000000604082015260600190565b6020808252600b908201527f61636c3a2066726f7a656e000000000000000000000000000000000000000000604082015260600190565b60208082526017908201527f416374696f6e2063616e74206265206578656375746564000000000000000000604082015260600190565b60208082526012908201527f71756575653a2062616420617070726f76650000000000000000000000000000604082015260600190565b60208082526022908201527f696e697469616c697a61626c653a20616c726561647920696e697469616c697a60408201527f6564000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f71756575653a2077616974206d6f726500000000000000000000000000000000604082015260600190565b60208082526017908201527f6465706f7369743a2062616420746f6b656e206c6f636b000000000000000000604082015260600190565b60208082526012908201527f71756575653a206e6f74207375626a6563740000000000000000000000000000604082015260600190565b6020808252601c908201527f63616c6c6461746173697a653a206c696d697420657863656564656400000000604082015260600190565b6020808252601c908201527f61636c3a20696e697469616c20726f6f74206d6973616c69676e656400000000604082015260600190565b6020808252600f908201527f61636c3a2062616420667265657a650000000000000000000000000000000000604082015260600190565b6020808252600e908201527f6d6174683a206f766572666c6f77000000000000000000000000000000000000604082015260600190565b600060208252610c566020830184612c63565b6000602082528251604060208401526134b46060840182612cd2565b60208501519150601f19848203016040850152611a128183612c63565b600060208252610c566020830184612cd2565b60008482526001600160a01b038416602083015260606040830152611a126060830184612c1f565b96875260208701959095526001600160a01b039384166040870152919092166060850152608084019190915260a083015260c082015260e00190565b60405181810167ffffffffffffffff8111828210171561356757600080fd5b604052919050565b600067ffffffffffffffff821115613585578081fd5b5060209081020190565b600067ffffffffffffffff8211156135a5578081fd5b50601f01601f191660200190565b60005b838110156135ce5781810151838201526020016135b6565b838111156106715750506000910152565b6001600160a01b03811681146135f457600080fd5b50565b6001600160e01b0319811681146135f457600080fdfea26469706673582212200f9a9927a169f9d92a41cd8a5d83be28032f53ce2dc1170196eb2852cf498da064736f6c63430006080033",
  "devdoc": {
    "methods": {
      "challenge(((uint256,uint256,address,address,(address,uint256,bytes)[],bytes32,bytes,address),(uint256,(address,uint256),(address,uint256),address,bytes,uint256)),bytes)": {
        "params": {
          "_container": "A ERC3000Data.Container struct holding both the payload being scheduled for execution and the current configuration of the system",
          "_reason": "Hint for case reviewers as to why the scheduled container is illegal"
        }
      },
      "configure((uint256,(address,uint256),(address,uint256),address,bytes,uint256))": {
        "params": {
          "_config": "A ERC3000Data.Config struct holding all the new params that will control the queue"
        }
      },
      "constructor": {
        "params": {
          "_aclRoot": "account that will be given root permissions on ACL (commonly given to factory)",
          "_initialConfig": "initial configuration parameters"
        }
      },
      "execute(((uint256,uint256,address,address,(address,uint256,bytes)[],bytes32,bytes,address),(uint256,(address,uint256),(address,uint256),address,bytes,uint256)))": {
        "params": {
          "_container": "A ERC3000Data.Container struct holding both the payload being scheduled for execution and the current configuration of the system"
        }
      },
      "resolve(((uint256,uint256,address,address,(address,uint256,bytes)[],bytes32,bytes,address),(uint256,(address,uint256),(address,uint256),address,bytes,uint256)),uint256)": {
        "params": {
          "_container": "A ERC3000Data.Container struct holding both the payload being scheduled for execution and the current configuration of the system",
          "_disputeId": "disputeId in the arbitrator in which the dispute over the container was created"
        }
      },
      "schedule(((uint256,uint256,address,address,(address,uint256,bytes)[],bytes32,bytes,address),(uint256,(address,uint256),(address,uint256),address,bytes,uint256)))": {
        "params": {
          "_container": "A ERC3000Data.Container struct holding both the payload being scheduled for execution and the current configuration of the system"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "challenge(((uint256,uint256,address,address,(address,uint256,bytes)[],bytes32,bytes,address),(uint256,(address,uint256),(address,uint256),address,bytes,uint256)),bytes)": {
        "notice": "Challenge a container in case its scheduling is illegal as per Config.rules. Pulls collateral and dispute fees from sender into contract"
      },
      "configure((uint256,(address,uint256),(address,uint256),address,bytes,uint256))": {
        "notice": "Apply a new configuration for all *new* containers to be scheduled"
      },
      "execute(((uint256,uint256,address,address,(address,uint256,bytes)[],bytes32,bytes,address),(uint256,(address,uint256),(address,uint256),address,bytes,uint256)))": {
        "notice": "Executes an action after its execution delay has passed and its state hasn't been altered by a challenge or veto"
      },
      "resolve(((uint256,uint256,address,address,(address,uint256,bytes)[],bytes32,bytes,address),(uint256,(address,uint256),(address,uint256),address,bytes,uint256)),uint256)": {
        "notice": "Apply arbitrator's ruling over a challenge once it has come to a final ruling"
      },
      "schedule(((uint256,uint256,address,address,(address,uint256,bytes)[],bytes32,bytes,address),(uint256,(address,uint256),(address,uint256),address,bytes,uint256)))": {
        "notice": "Schedules an action for execution, allowing for challenges and vetos on a defined time window. Pulls collateral from submitter into contract."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 530,
        "contract": "contracts/pipelines/GovernQueue.sol:GovernQueue",
        "label": "standardSupported",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 534,
        "contract": "contracts/pipelines/GovernQueue.sol:GovernQueue",
        "label": "callbackMagicNumbers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes4,t_bytes32)"
      },
      {
        "astId": 1087,
        "contract": "contracts/pipelines/GovernQueue.sol:GovernQueue",
        "label": "initBlocks",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 66,
        "contract": "contracts/pipelines/GovernQueue.sol:GovernQueue",
        "label": "roles",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes4,t_mapping(t_address,t_address))"
      },
      {
        "astId": 1941,
        "contract": "contracts/pipelines/GovernQueue.sol:GovernQueue",
        "label": "configHash",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 1943,
        "contract": "contracts/pipelines/GovernQueue.sol:GovernQueue",
        "label": "nonce",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1947,
        "contract": "contracts/pipelines/GovernQueue.sol:GovernQueue",
        "label": "queue",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(Item)1863_storage)"
      },
      {
        "astId": 1951,
        "contract": "contracts/pipelines/GovernQueue.sol:GovernQueue",
        "label": "challengerCache",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 1957,
        "contract": "contracts/pipelines/GovernQueue.sol:GovernQueue",
        "label": "disputeItemCache",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_mapping(t_contract(IArbitrator)2995,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IArbitrator)2995": {
        "encoding": "inplace",
        "label": "contract IArbitrator",
        "numberOfBytes": "20"
      },
      "t_enum(State)1860": {
        "encoding": "inplace",
        "label": "enum GovernQueueStateLib.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_mapping(t_contract(IArbitrator)2995,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(contract IArbitrator => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IArbitrator)2995,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(Item)1863_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct GovernQueueStateLib.Item)",
        "numberOfBytes": "32",
        "value": "t_struct(Item)1863_storage"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes4,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes4,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_contract(IArbitrator)2995,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IArbitrator)2995",
        "label": "mapping(contract IArbitrator => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Item)1863_storage": {
        "encoding": "inplace",
        "label": "struct GovernQueueStateLib.Item",
        "members": [
          {
            "astId": 1862,
            "contract": "contracts/pipelines/GovernQueue.sol:GovernQueue",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(State)1860"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}